/*
Copyright 2023.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller

import (
	"context"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/log"


)

// NginxReconciler reconciles a Nginx object
type NginxReconciler struct {
	client.Client
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=apps.kubeoperator.local,resources=nginxes,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=apps.kubeoperator.local,resources=nginxes/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=apps.kubeoperator.local,resources=nginxes/finalizers,verbs=update

// Reconcile is part of the main kubernetes reconciliation loop which aims to
// move the current state of the cluster closer to the desired state.
// TODO(user): Modify the Reconcile function to compare the state specified by
// the Nginx object against the actual cluster state, and then
// perform operations to make the cluster state reflect the state specified by
// the user.
//
// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.14.4/pkg/reconcile
func (r *NginxReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	l := log.FromContext(ctx).WithValues("nginx", req.Namespace)

	// Fetch the Nginx instance
	var inst appsv1.Nginx
	if err := r.Get(ctx, req.NamespacedName, &inst); err != nil {
		l.Error(err, "nginx resource not found.")
		return ctrl.Result{}, client.IgnoreNotFound(err)
	}

	// Check if the Deployment already exists, else create a new one
	_ = appsv2.Deployment{}

	var nList appsv1.NginxList
	var podFound bool

	if err := r.List(ctx, &nList); err != nil {
		l.Error(err, "unable to list pods")
	} else {
		for _, item := range nList.Items {
			if item.GetName() == inst.Spec.Name {
				l.Info("pod with the custom resource found", "name", item.GetName())
				podFound = true
			}
		}
	}

	inst.Status.Healthy = podFound
	if err := r.Status().Update(ctx, &inst); err != nil {
		l.Error(err, "unable to update nginx status", "status", podFound)
		return ctrl.Result{}, err
	}
	l.Info("nginx status updated", "status", podFound)

	/*
		// Check if the Deployment already exists, else create a new one
		deployment := &appsv1.Deployment{}
		err = r.Get(ctx, types.NamespacedName{Name: instance.Name, Namespace: instance.Namespace}, deployment)
		if err != nil && errors.IsNotFound(err) {
			dep := r.deploymentForNginx(instance)
			l.Info("Creating a new Deployment.", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
			err = r.Create(ctx, dep)
			if err != nil {
				l.Error(err, "Failed to create new Deployment.", "Deployment.Namespace", dep.Namespace, "Deployment.Name", dep.Name)
				return ctrl.Result{}, err
			}
			return ctrl.Result{Requeue: true}, nil
		} else if err != nil {
			l.Error(err, "Failed to get Deployment.")
			return ctrl.Result{}, err
		}

		// Update the Deployment with the latest specifications
		if hasDeploymentChanged(deployment, instance) {
			deployment = r.deploymentForNginx(instance)
			l.Info("Updating Deployment.", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
			err = r.Update(ctx, deployment)
			if err != nil {
				l.Error(err, "Failed to update Deployment.", "Deployment.Namespace", deployment.Namespace, "Deployment.Name", deployment.Name)
				return ctrl.Result{}, err
			}
			return ctrl.Result{Requeue: true}, nil
		}*/

	return ctrl.Result{}, nil
}

/*
// Add the following helper function at the end of the file
func (r *NginxReconciler) deploymentForNginx(nginx *appsv1.Nginx) *appsv1.Nginx {
	dep := &appsv1.Nginx{
		ObjectMeta: metav1.ObjectMeta{
			Name:      nginx.Name,
			Namespace: nginx.Namespace,
		},
		Spec: appsv1.NginxSpec{
			Replicas: nginx.Spec.Replicas,
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{
					"app": nginx.Name,
				},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app": nginx.Name,
					},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:  nginx.Name,
							Image: nginx.Spec.Image,
							Ports: []corev1.ContainerPort{
								{
									ContainerPort: 80,
								},
							},
						},
					},
				},
			},
		},
	}
	// Set owner reference to the Nginx object
	controllerutil.SetControllerReference(nginx, dep, r.Scheme)
	return dep
}

// Add the following function at the end of the file
func hasDeploymentChanged(existing *appsv1.Nginx, desired *appsv1.Nginx) bool {
	// Compare the relevant fields of the Deployment and Nginx objects
	return existing.Spec.Replicas != desired.Spec.Replicas ||
		existing.Spec.Template.Spec.Containers[0].Image != desired.Spec.Image
}
*/
// SetupWithManager sets up the controller with the Manager.
func (r *NginxReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&appsv1.Nginx{}).
		Complete(r)
}
